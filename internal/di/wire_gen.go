// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/Imnarka/user-service/internal/app"
	"github.com/Imnarka/user-service/internal/config"
	"github.com/Imnarka/user-service/internal/db"
	"github.com/Imnarka/user-service/internal/logger"
	"github.com/Imnarka/user-service/internal/transport/grpc"
	"github.com/Imnarka/user-service/internal/users"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeGRPCServer(cfg *config.Config) (*AppComponents, error) {
	databaseConfig := provideDBConfig(cfg)
	loggerLogger := logger.InitLogger(cfg)
	gormDB, err := db.InitDB(databaseConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	userRepository := users.NewUserRepository(gormDB, loggerLogger)
	service := users.NewService(userRepository)
	userServiceServer := grpc.NewHandler(service)
	server := grpc.NewServer(userServiceServer)
	appApp := app.NewApp(server, gormDB, loggerLogger, cfg)
	appComponents := &AppComponents{
		App:    appApp,
		DB:     gormDB,
		Logger: loggerLogger,
		Config: cfg,
	}
	return appComponents, nil
}

// wire.go:

type AppComponents struct {
	App    *app.App
	DB     *gorm.DB
	Logger *logger.Logger
	Config *config.Config
}

func provideDBConfig(cfg *config.Config) *db.DatabaseConfig {
	return &db.DatabaseConfig{
		Host:     cfg.DBHost,
		Port:     cfg.DBPort,
		User:     cfg.DBUser,
		Password: cfg.DBPassword,
		DBName:   cfg.DBName,
		SSLMode:  cfg.DBSSLMode,
	}
}

var loggerSet = wire.NewSet(logger.InitLogger)

var databaseSet = wire.NewSet(
	provideDBConfig, db.InitDB,
)

var userSet = wire.NewSet(users.NewUserRepository, users.NewService)

var transportSet = wire.NewSet(grpc.NewHandler, grpc.NewServer)
